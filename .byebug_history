quit
cont
current_user
n
current_user
cont
current_user
n
current_user
n
current_user
cont
current_user
cont
current_user
current_User
current_users
current_user
cont
@current_user
cont
quit
@agencies
user.id
user
current_user
quit
find 1
find 2
User
find_by 2
find_by 
find_by params[:id]
params
cont
quit
cont
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODgyMTY4MzcsInN1YiI6MiwidmVyIjoxLCJ0eXAiOiJyZWZyZXNoIn0.qgBqDtKzpdte3G9AwAwt46tMRuk_L21tvJoG4trss10", JWT::Auth.secret)
Rails.secrets
Rails.secret
Rails.sercret
JWT.decode("eyJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1ODgyMTY4MzcsInN1YiI6MiwidmVyIjoxLCJ0eXAiOiJyZWZyZXNoIn0.qgBqDtKzpdte3G9AwAwt46tMRuk_L21tvJoG4trss10", Rails.secrets.sercret_key_base)
request.headers['Authorization']
request.headers['Authorization
token
cont
response.headers['Authorization']
request.headers['Authorization']
n
token.to_jwt
token
s
params
s
user
current_user
s
@user
cont
n
token
n
header
s
token
quit
subject
s
n
s
token
cont
n
token
cont
JWT.decode(token, JWT::Auth.secret)
token
n
header.scan(/Bearer (.*)$/).flatten.last
n
header
n
header
s
cont
token
n
header
n
s
header
quit
cont
params
cont
token&.subject
s
cont
params
cont
params
cont
params
quit
cont
params
cont
n
token
s
params
cont
params
cont
params
cont
params
cont
quit
JWT::Version
JWT.header
methods JWT
method JWT
function
JWT.decode
JWT
current_user
cont
current_user
cont
current_user
request.headers[:Authorization]
cont
request.headers[:Authorization]
current_user
cont
request.headers[:Authorization]
request.headers[:Authrorization]
request.headers
current_user
cont
current_user
cont
quit
User.all
Usersall
current_user
cont
UsersCategory.all
(UsersCategory.preferrence_of current_user).count
UsersCategory.preferrence_of current_user
UsersCategory
current_user
cont
n
cont
exception
exceptions
n
quit
exception
n
list
params[:agency][:logopath]
params[agency[:logopath]]
params
param
param.file
quit
@errors.record.errors.messages
@errors.record.messages
@errors
r
quit
messages
title
quit
@errors.record.errors.messages
@errors.record.errors
@errors.record.messages
@errors.record.message
@errors.record.messages
@errors.record
@errors.record.messages
@errors.record.messges
quit
@errors.record.errors.messages
@errors.record.errors
@errors.error
@errors.record
@errors.records
@errors.invalid
@errors.errors
@errors.errirs
@errors.to_json
@errors.class
@errors.errors
@errors
cont
quit
ERRORS[klass.class]
ERRORS[klass]
ERRORS
klass.class.name
klass
s
cont
quit
handler
n
cont
handler
n
s
origin_error
quit
error.class
error.to_sym
error.to_s
error.to_json
error
error.source
error.sourc
cont
error.to_s
cont
quit
render_handler
s
cont
quit
@status
s
quit
render_handler.status
render_handler
n
origin_error
handler
cont
origin_error
continue
origin_error
cont
bcont
quit
origin_error
handler
cont
@news.nil?
n
cont
n
@news
n
cont
